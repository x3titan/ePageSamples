using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace TamPub1 {
    public class EncryptEx {
        public static byte[] Chaos8Bit = new byte[0x100] {
            //  ___0 ___1 ___2 ___3 ___4 ___5 ___6 ___7 ___8 ___9 ___A ___B ___C ___D ___E ___F
                0xD4,0xBF,0x91,0xEB,0x4E,0x37,0xDD,0x51,0x7D,0x43,0x1B,0x6C,0x59,0xAB,0x9B,0xEF, // 0
                0xD8,0x71,0x3B,0x94,0xD2,0xBA,0x9D,0xE7,0xE5,0x1F,0x85,0x44,0x1A,0x73,0x22,0xB4, // 1
                0x96,0x14,0xC0,0x16,0xE0,0x50,0x87,0x5F,0x0F,0xA0,0xEE,0x17,0xCA,0x8C,0x02,0xC7, // 2
                0x75,0xAD,0x6E,0x09,0x01,0xA2,0xED,0x54,0x49,0x4F,0x31,0x2B,0xBB,0xA5,0x15,0x1D, // 3
                0x20,0xC1,0x28,0x61,0x6F,0xB8,0xD9,0x4A,0x89,0x08,0x2C,0x90,0x88,0xF2,0x97,0x2A, // 4
                0x03,0x56,0x34,0x83,0x69,0x05,0x72,0x63,0x30,0x5D,0xDE,0x3D,0xB0,0x79,0x0C,0xB7, // 5
                0x00,0x18,0xD3,0x35,0x66,0xFF,0x8B,0xB9,0x21,0x57,0x55,0x11,0x95,0x04,0x36,0x93, // 6
                0xB3,0xB5,0xEA,0xD1,0x2F,0xCD,0xF6,0xDA,0xE2,0x4B,0x53,0xFE,0xAF,0x4C,0x9C,0x78, // 7
                0xDF,0x58,0x8A,0x3F,0x3A,0xAE,0x42,0xE8,0x6B,0x5C,0x2D,0x81,0xCB,0x13,0x1C,0x38, // 8
                0xD6,0xA7,0xE6,0xBD,0x12,0x52,0x41,0x47,0x6A,0xD5,0x10,0xA8,0x2E,0xF0,0x07,0x7A, // 9
                0xC3,0x86,0xDC,0xB1,0x06,0xC2,0xAC,0xA3,0xC6,0x27,0xF1,0x5E,0x60,0xF4,0x7F,0xCF, // A
                0xE1,0xFD,0xEC,0xF3,0xC4,0x33,0xDB,0xA4,0xC5,0xE4,0x25,0x8D,0x4D,0x48,0x9E,0xC8, // B
                0xF9,0x26,0x82,0x24,0xF7,0x7B,0x7E,0x65,0xF8,0xD7,0x84,0x9A,0xFC,0x3E,0x1E,0xD0, // C
                0x74,0x64,0xA1,0xFA,0x23,0x7C,0x76,0x68,0x92,0x0D,0xC9,0x3C,0x8E,0x98,0xBE,0x19, // D
                0x0B,0x39,0xCC,0xA6,0xB2,0x77,0x32,0x5B,0x6D,0x40,0xFB,0x45,0x9F,0xE3,0x70,0x0E, // E
                0xF5,0x0A,0x46,0x67,0xCE,0x80,0x8F,0x99,0xE9,0xB6,0xBC,0xAA,0x5A,0xA9,0x29,0x62  // F
            //  ___0 ___1 ___2 ___3 ___4 ___5 ___6 ___7 ___8 ___9 ___A ___B ___C ___D ___E ___F
        };

        /// <summary>对任意长度数据加密，秘钥是4字节整数</summary>
        public static byte[] encrypt(byte[] buff, UInt32 key) {
            byte[] result;
            byte bkey = Convert.ToByte(key & 0x000000FF);
            result = encrypt(buff, bkey);
            bkey = Convert.ToByte((key >> 8) & 0xFF);
            result = encrypt(result, bkey);
            bkey = Convert.ToByte((key >> 16) & 0xFF);
            result = encrypt(result, bkey);
            bkey = Convert.ToByte((key >> 24) & 0xFF);
            result = encrypt(result, bkey);
            return result;
        }

        /// <summary>对任意长度数据加密，秘钥是字节</summary>
        public static byte[] encrypt(byte[] buff, byte key) {
            byte[] result = new byte[buff.Length];
            for (int i = 0; i < buff.Length; i++) {
                key = Convert.ToByte(Chaos8Bit[buff[i] ^ key] ^ key);
                result[i] = key;
            }
            for (int i = 0; i < buff.Length; i++) {
                key = Convert.ToByte(Chaos8Bit[buff[i] ^ key] ^ key);
                result[i] = key;
            }
            return result;
        }

        /// <summary>用于防伪序号的40比特(5字节)加密, buff有1万亿种取值</summary>
        public static Int64 encrypt40bit(Int64 buff, UInt32 key) {
            byte[] t = new byte[5];
            t[0] = Convert.ToByte(buff & 0xFF);
            t[1] = Convert.ToByte((buff >> 8) & 0xFF);
            t[2] = Convert.ToByte((buff >> 16) & 0xFF);
            t[3] = Convert.ToByte((buff >> 24) & 0xFF);
            t[4] = Convert.ToByte((buff >> 32) & 0xFF);
            t = encrypt(t, key);
            Int64 result = t[0];
            result = result | (Convert.ToInt64(t[1]) << 8);
            result = result | (Convert.ToInt64(t[2]) << 16);
            result = result | (Convert.ToInt64(t[3]) << 24);
            result = result | (Convert.ToInt64(t[4]) << 32);
            return result;
        }


    }
}
